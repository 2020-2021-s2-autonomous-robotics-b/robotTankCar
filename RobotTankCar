#!/usr/bin/env pybricks-micropython
from pybricks.hubs import EV3Brick
from pybricks.ev3devices import (Motor, TouchSensor, ColorSensor,
                                 InfraredSensor, UltrasonicSensor, GyroSensor)
from pybricks.parameters import Port, Stop, Direction, Button, Color
from pybricks.tools import wait, StopWatch, DataLog
from pybricks.robotics import DriveBase
from pybricks.media.ev3dev import SoundFile, ImageFile


# This program requires LEGO EV3 MicroPython v2.0 or higher.
# Click "Open user guide" on the EV3 extension tab for more information.


# Create your objects here.
ev3 = EV3Brick()


#!/usr/bin/env pybricks-micropython
from pybricks.hubs import EV3Brick
from pybricks.ev3devices import (Motor, TouchSensor, ColorSensor,
                                 InfraredSensor, UltrasonicSensor, GyroSensor)
from pybricks.parameters import Port, Stop, Direction, Button, Color
from pybricks.tools import wait, StopWatch, DataLog
from pybricks.robotics import DriveBase
from pybricks.media.ev3dev import SoundFile, ImageFile


# This program requires LEGO EV3 MicroPython v2.0 or higher.
# Click "Open user guide" on the EV3 extension tab for more information.


# Create your objects here.
ev3 = EV3Brick()


#definitions
motorA = Motor (Port.A )

motorB = Motor (Port.B )
#code

ds = UltrasonicSensor (Port.S3)
ts1 = TouchSensor (Port.S1)
ts2 = TouchSensor (Port.S2)
speed = 1000
motorA.run(speed)
motorB.run(speed)
while True:
    if ts1.pressed() and ts2.pressed():
        # both are pressed, move forwards
        motorA.stop()
        motorB.stop()
        wait (900)

    elif ts1.pressed():
        # ts1 is pressed, turn right
        motorA.run(speed)
        motorB.run(-speed)
        wait (900)
    elif ts2.pressed():
        # ts2 pressed, turn left
        motorA.run(-speed)
        motorB.run(speed)
        wait (900)
    else:
        motorA.run(speed)
        motorB.run(speed) 
        
        print (ds.distance()) 
    
        if ds.distance () < 500 : 
            motorA.stop () 
            motorB.run (-speed) 



